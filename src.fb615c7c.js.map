{"version":3,"sources":["../node_modules/suncalc/suncalc.js","index.js"],"names":["suncalc","require","times","getTimes","Date","console","table","log","sunrise","toLocaleTimeString","sunriseEnd","goldenHourEnd","solarNoon","goldenHour","sunsetStart","sunset","dusk","nauticalDusk","night","nadir","nightEnd","nauticalDawn","dawn"],"mappings":";;AAsTA,IAAA,GAhTA,WAAA,aAIA,IAAA,EAAA,KAAA,GACA,EAAA,KAAA,IACA,EAAA,KAAA,IACA,EAAA,KAAA,IACA,EAAA,KAAA,KACA,EAAA,KAAA,MACA,EAAA,KAAA,KACA,EAAA,EAAA,IAOA,EAAA,MACA,EAAA,QACA,EAAA,QAGA,SAAA,EAAA,GAAA,OAAA,IAAA,MAAA,EAAA,GAAA,GAAA,GACA,SAAA,EAAA,GAAA,OAFA,SAAA,GAAA,OAAA,EAAA,UAAA,EAAA,GAAA,EAEA,CAAA,GAAA,EAKA,IAAA,EAAA,QAAA,EAEA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAEA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAEA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,OAAA,YAAA,GAAA,EAaA,SAAA,EAAA,GAAA,OAAA,GAAA,SAAA,UAAA,GAEA,SAAA,EAAA,GAKA,OAAA,EAHA,GAAA,OAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,KAAA,EAAA,EAAA,IACA,SAAA,EAEA,EAGA,SAAA,EAAA,GAEA,IACA,EAAA,EADA,EAAA,IAGA,MAAA,CACA,IAAA,EAAA,EAAA,GACA,GAAA,EAAA,EAAA,IAKA,IAAA,EAAA,CAKA,YAAA,SAAA,EAAA,EAAA,GAEA,IAAA,EAAA,GAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GAEA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,GAEA,MAAA,CACA,QAAA,EAAA,EAAA,EAAA,EAAA,KACA,SAAA,EAAA,EAAA,EAAA,EAAA,QAOA,EAAA,EAAA,MAAA,CACA,EAAA,KAAA,UAAA,UACA,EAAA,GAAA,aAAA,eACA,EAAA,EAAA,OAAA,QACA,EAAA,GAAA,eAAA,gBACA,EAAA,GAAA,WAAA,SACA,CAAA,EAAA,gBAAA,eAKA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,EAAA,KAAA,CAAA,EAAA,EAAA,KAMA,IAAA,EAAA,KAIA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EACA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,MAAA,EAAA,GAAA,MAAA,EAAA,EAAA,GAKA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAIA,OAAA,EADA,EANA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAKA,CAAA,EAAA,EAAA,GACA,EAAA,GACA,EAAA,GA6CA,SAAA,EAAA,GAEA,IACA,EAAA,GAAA,QAAA,UAAA,GACA,EAAA,GAAA,OAAA,SAAA,GAEA,EAJA,GAAA,QAAA,UAAA,GAIA,MAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,OAAA,MAAA,EAAA,GAEA,MAAA,CACA,GAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GACA,KAAA,GAoDA,SAAA,EAAA,EAAA,GACA,OAAA,IAAA,KAAA,EAAA,UAAA,EAAA,EAAA,IAzGA,EAAA,SAAA,SAAA,EAAA,EAAA,GAEA,IAaA,EAAA,EAAA,EAAA,EAAA,EAbA,EAAA,GAAA,EACA,EAAA,EAAA,EAGA,EAxBA,SAAA,EAAA,GAAA,OAAA,KAAA,MAAA,EAAA,EAAA,GAAA,EAAA,IAwBA,CADA,EAAA,GACA,GACA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAEA,EAAA,EAAA,EAAA,EAAA,GAKA,EAAA,CACA,UAAA,EAAA,GACA,MAAA,EAAA,EAAA,KAGA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,GAAA,EAIA,EAAA,IADA,EAAA,GAFA,EAAA,EAAA,IAEA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,GAEA,EAAA,EAAA,IAAA,EAAA,GACA,EAAA,EAAA,IAAA,EAAA,GAGA,OAAA,GAuBA,EAAA,gBAAA,SAAA,EAAA,EAAA,GAEA,IAAA,EAAA,GAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GAEA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAIA,OAFA,GAlKA,SAAA,GAMA,OALA,EAAA,IACA,EAAA,GAIA,QAAA,KAAA,IAAA,EAAA,WAAA,EAAA,YA4JA,CAAA,GAEA,CACA,QAAA,EAAA,EAAA,EAAA,EAAA,KACA,SAAA,EACA,SAAA,EAAA,KACA,iBAAA,IASA,EAAA,oBAAA,SAAA,GAEA,IAAA,EAAA,EAAA,GAAA,IAAA,MACA,EAAA,EAAA,GACA,EAAA,EAAA,GAIA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,KACA,EAAA,EAHA,SAGA,EAAA,GAAA,EAAA,KAHA,SAGA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KACA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,KAEA,MAAA,CACA,UAAA,EAAA,EAAA,IAAA,EACA,MAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,KAAA,GACA,MAAA,IAWA,EAAA,aAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,IAAA,KAAA,GACA,EAAA,EAAA,YAAA,EAAA,EAAA,EAAA,GACA,EAAA,SAAA,EAAA,EAAA,EAAA,GAOA,IALA,IAEA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAFA,EAAA,KAAA,EACA,EAAA,EAAA,gBAAA,EAAA,EAAA,GAAA,SAAA,EAIA,EAAA,EAAA,GAAA,KACA,EAAA,EAAA,gBAAA,EAAA,EAAA,GAAA,EAAA,GAAA,SAAA,EAMA,IAHA,GAAA,GAFA,EAAA,EAAA,gBAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,SAAA,IAEA,EAAA,IAEA,IADA,GAAA,EAAA,GAAA,IACA,EAAA,IACA,GAAA,EAAA,EAEA,EAAA,GADA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,IAEA,EAAA,GADA,EAAA,KAAA,KAAA,IAAA,EAAA,KAAA,IAAA,KAEA,EAAA,EAAA,EACA,KAAA,IAAA,IAAA,GAAA,IACA,KAAA,IAAA,IAAA,GAAA,IACA,GAAA,IAAA,EAAA,IAGA,IAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAEA,IAAA,IACA,EAAA,GAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,EAAA,KAGA,IAAA,GA7BA,GAAA,EA+BA,EAAA,EAGA,IAAA,EAAA,GAOA,OALA,IAAA,EAAA,KAAA,EAAA,EAAA,IACA,IAAA,EAAA,IAAA,EAAA,EAAA,IAEA,GAAA,IAAA,EAAA,EAAA,EAAA,WAAA,eAAA,GAEA,GAKA,iBAAA,SAAA,oBAAA,OAAA,OAAA,QAAA,EACA,mBAAA,GAAA,EAAA,IAAA,EAAA,GACA,OAAA,QAAA,EA7SA;;ACNA,IAAIA,EAAUC,QAAQ,WAElBC,EAAQF,EAAQG,SAAS,IAAIC,MAAS,KAAM,OAEhDC,QAAQC,MAAMJ,GAGdG,QAAQE,IAAI,uBAAyBL,EAAMM,QAAQC,sBAGnDJ,QAAQE,IAAI,uBAAyBL,EAAMQ,WAAWD,sBAGtDJ,QAAQE,IAAI,uBAAyBL,EAAMS,cAAcF,sBAGzDJ,QAAQE,IAAI,uBAAyBL,EAAMU,UAAUH,sBAGrDJ,QAAQE,IAAI,uBAAyBL,EAAMW,WAAWJ,sBAGtDJ,QAAQE,IAAI,uBAAyBL,EAAMY,YAAYL,sBAGvDJ,QAAQE,IAAI,uBAAyBL,EAAMa,OAAON,sBAGlDJ,QAAQE,IAAI,uBAAyBL,EAAMc,KAAKP,sBAGhDJ,QAAQE,IAAI,uBAAyBL,EAAMe,aAAaR,sBAGxDJ,QAAQE,IAAI,uBAAyBL,EAAMgB,MAAMT,sBAGjDJ,QAAQE,IAAI,uBAAyBL,EAAMiB,MAAMV,sBAGjDJ,QAAQE,IAAI,uBAAyBL,EAAMkB,SAASX,sBAGpDJ,QAAQE,IAAI,uBAAyBL,EAAMmB,aAAaZ,sBAGxDJ,QAAQE,IAAI,uBAAyBL,EAAMoB,KAAKb","file":"src.fb615c7c.js","sourceRoot":"../src","sourcesContent":["/*\n (c) 2011-2015, Vladimir Agafonkin\n SunCalc is a JavaScript library for calculating sun/moon position and light phases.\n https://github.com/mourner/suncalc\n*/\n\n(function () { 'use strict';\n\n// shortcuts for easier to read formulas\n\nvar PI   = Math.PI,\n    sin  = Math.sin,\n    cos  = Math.cos,\n    tan  = Math.tan,\n    asin = Math.asin,\n    atan = Math.atan2,\n    acos = Math.acos,\n    rad  = PI / 180;\n\n// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n\n\n// date/time constants and conversions\n\nvar dayMs = 1000 * 60 * 60 * 24,\n    J1970 = 2440588,\n    J2000 = 2451545;\n\nfunction toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }\nfunction fromJulian(j)  { return new Date((j + 0.5 - J1970) * dayMs); }\nfunction toDays(date)   { return toJulian(date) - J2000; }\n\n\n// general calculations for position\n\nvar e = rad * 23.4397; // obliquity of the Earth\n\nfunction rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }\nfunction declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }\n\nfunction azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }\nfunction altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }\n\nfunction siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }\n\nfunction astroRefraction(h) {\n    if (h < 0) // the following formula works for positive altitudes only.\n        h = 0; // if h = -0.08901179 a div/0 would occur.\n\n    // formula 16.4 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n    // 1.02 / tan(h + 10.26 / (h + 5.10)) h in degrees, result in arc minutes -> converted to rad:\n    return 0.0002967 / Math.tan(h + 0.00312536 / (h + 0.08901179));\n}\n\n// general sun calculations\n\nfunction solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }\n\nfunction eclipticLongitude(M) {\n\n    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center\n        P = rad * 102.9372; // perihelion of the Earth\n\n    return M + C + P + PI;\n}\n\nfunction sunCoords(d) {\n\n    var M = solarMeanAnomaly(d),\n        L = eclipticLongitude(M);\n\n    return {\n        dec: declination(L, 0),\n        ra: rightAscension(L, 0)\n    };\n}\n\n\nvar SunCalc = {};\n\n\n// calculates sun position for a given date and latitude/longitude\n\nSunCalc.getPosition = function (date, lat, lng) {\n\n    var lw  = rad * -lng,\n        phi = rad * lat,\n        d   = toDays(date),\n\n        c  = sunCoords(d),\n        H  = siderealTime(d, lw) - c.ra;\n\n    return {\n        azimuth: azimuth(H, phi, c.dec),\n        altitude: altitude(H, phi, c.dec)\n    };\n};\n\n\n// sun times configuration (angle, morning name, evening name)\n\nvar times = SunCalc.times = [\n    [-0.833, 'sunrise',       'sunset'      ],\n    [  -0.3, 'sunriseEnd',    'sunsetStart' ],\n    [    -6, 'dawn',          'dusk'        ],\n    [   -12, 'nauticalDawn',  'nauticalDusk'],\n    [   -18, 'nightEnd',      'night'       ],\n    [     6, 'goldenHourEnd', 'goldenHour'  ]\n];\n\n// adds a custom time to the times config\n\nSunCalc.addTime = function (angle, riseName, setName) {\n    times.push([angle, riseName, setName]);\n};\n\n\n// calculations for sun times\n\nvar J0 = 0.0009;\n\nfunction julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }\n\nfunction approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }\nfunction solarTransitJ(ds, M, L)  { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }\n\nfunction hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }\n\n// returns set time for the given sun altitude\nfunction getSetJ(h, lw, phi, dec, n, M, L) {\n\n    var w = hourAngle(h, phi, dec),\n        a = approxTransit(w, lw, n);\n    return solarTransitJ(a, M, L);\n}\n\n\n// calculates sun times for a given date and latitude/longitude\n\nSunCalc.getTimes = function (date, lat, lng) {\n\n    var lw = rad * -lng,\n        phi = rad * lat,\n\n        d = toDays(date),\n        n = julianCycle(d, lw),\n        ds = approxTransit(0, lw, n),\n\n        M = solarMeanAnomaly(ds),\n        L = eclipticLongitude(M),\n        dec = declination(L, 0),\n\n        Jnoon = solarTransitJ(ds, M, L),\n\n        i, len, time, Jset, Jrise;\n\n\n    var result = {\n        solarNoon: fromJulian(Jnoon),\n        nadir: fromJulian(Jnoon - 0.5)\n    };\n\n    for (i = 0, len = times.length; i < len; i += 1) {\n        time = times[i];\n\n        Jset = getSetJ(time[0] * rad, lw, phi, dec, n, M, L);\n        Jrise = Jnoon - (Jset - Jnoon);\n\n        result[time[1]] = fromJulian(Jrise);\n        result[time[2]] = fromJulian(Jset);\n    }\n\n    return result;\n};\n\n\n// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas\n\nfunction moonCoords(d) { // geocentric ecliptic coordinates of the moon\n\n    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude\n        M = rad * (134.963 + 13.064993 * d), // mean anomaly\n        F = rad * (93.272 + 13.229350 * d),  // mean distance\n\n        l  = L + rad * 6.289 * sin(M), // longitude\n        b  = rad * 5.128 * sin(F),     // latitude\n        dt = 385001 - 20905 * cos(M);  // distance to the moon in km\n\n    return {\n        ra: rightAscension(l, b),\n        dec: declination(l, b),\n        dist: dt\n    };\n}\n\nSunCalc.getMoonPosition = function (date, lat, lng) {\n\n    var lw  = rad * -lng,\n        phi = rad * lat,\n        d   = toDays(date),\n\n        c = moonCoords(d),\n        H = siderealTime(d, lw) - c.ra,\n        h = altitude(H, phi, c.dec),\n        // formula 14.1 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n        pa = atan(sin(H), tan(phi) * cos(c.dec) - sin(c.dec) * cos(H));\n\n    h = h + astroRefraction(h); // altitude correction for refraction\n\n    return {\n        azimuth: azimuth(H, phi, c.dec),\n        altitude: h,\n        distance: c.dist,\n        parallacticAngle: pa\n    };\n};\n\n\n// calculations for illumination parameters of the moon,\n// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and\n// Chapter 48 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n\nSunCalc.getMoonIllumination = function (date) {\n\n    var d = toDays(date || new Date()),\n        s = sunCoords(d),\n        m = moonCoords(d),\n\n        sdist = 149598000, // distance from Earth to Sun in km\n\n        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),\n        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),\n        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -\n                cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));\n\n    return {\n        fraction: (1 + cos(inc)) / 2,\n        phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,\n        angle: angle\n    };\n};\n\n\nfunction hoursLater(date, h) {\n    return new Date(date.valueOf() + h * dayMs / 24);\n}\n\n// calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article\n\nSunCalc.getMoonTimes = function (date, lat, lng, inUTC) {\n    var t = new Date(date);\n    if (inUTC) t.setUTCHours(0, 0, 0, 0);\n    else t.setHours(0, 0, 0, 0);\n\n    var hc = 0.133 * rad,\n        h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,\n        h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;\n\n    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)\n    for (var i = 1; i <= 24; i += 2) {\n        h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;\n        h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;\n\n        a = (h0 + h2) / 2 - h1;\n        b = (h2 - h0) / 2;\n        xe = -b / (2 * a);\n        ye = (a * xe + b) * xe + h1;\n        d = b * b - 4 * a * h1;\n        roots = 0;\n\n        if (d >= 0) {\n            dx = Math.sqrt(d) / (Math.abs(a) * 2);\n            x1 = xe - dx;\n            x2 = xe + dx;\n            if (Math.abs(x1) <= 1) roots++;\n            if (Math.abs(x2) <= 1) roots++;\n            if (x1 < -1) x1 = x2;\n        }\n\n        if (roots === 1) {\n            if (h0 < 0) rise = i + x1;\n            else set = i + x1;\n\n        } else if (roots === 2) {\n            rise = i + (ye < 0 ? x2 : x1);\n            set = i + (ye < 0 ? x1 : x2);\n        }\n\n        if (rise && set) break;\n\n        h0 = h2;\n    }\n\n    var result = {};\n\n    if (rise) result.rise = hoursLater(t, rise);\n    if (set) result.set = hoursLater(t, set);\n\n    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;\n\n    return result;\n};\n\n\n// export as Node module / AMD module / browser variable\nif (typeof exports === 'object' && typeof module !== 'undefined') module.exports = SunCalc;\nelse if (typeof define === 'function' && define.amd) define(SunCalc);\nelse window.SunCalc = SunCalc;\n\n}());\n","var suncalc = require(\"suncalc\")\n\nvar times = suncalc.getTimes(new Date(), -37.8, 144.9)\n\nconsole.table(times)\n\n// sunrise (top edge of the sun appears on the horizon)\nconsole.log(\"sunrise             \" + times.sunrise.toLocaleTimeString())\n\n// sunrise ends (bottom edge of the sun touches the horizon)\nconsole.log(\"sunriseEnd          \" + times.sunriseEnd.toLocaleTimeString())\n\n// morning golden hour (soft light, best time for photography.ends\nconsole.log(\"goldenHourEnd       \" + times.goldenHourEnd.toLocaleTimeString())\n\n// solar noon (sun is in the highest position)\nconsole.log(\"solarNoon           \" + times.solarNoon.toLocaleTimeString())\n\n// evening golden hour starts\nconsole.log(\"goldenHour          \" + times.goldenHour.toLocaleTimeString())\n\n// sunset starts (bottom edge of the sun touches the horizon)\nconsole.log(\"sunsetStart         \" + times.sunsetStart.toLocaleTimeString())\n\n// sunset (sun disappears below the horizon, evening civil twilight starts)\nconsole.log(\"sunset              \" + times.sunset.toLocaleTimeString())\n\n// dusk (evening nautical twilight starts)\nconsole.log(\"dusk                \" + times.dusk.toLocaleTimeString())\n\n// nautical dusk (evening astronomical twilight starts)\nconsole.log(\"nauticalDusk        \" + times.nauticalDusk.toLocaleTimeString())\n\n// night starts (dark enough for astronomical observations)\nconsole.log(\"night               \" + times.night.toLocaleTimeString())\n\n// nadir (darkest moment of the night, sun is in the lowest position)\nconsole.log(\"nadir               \" + times.nadir.toLocaleTimeString())\n\n// night ends (morning astronomical twilight starts)\nconsole.log(\"nightEnd            \" + times.nightEnd.toLocaleTimeString())\n\n// nautical dawn (morning nautical twilight starts)\nconsole.log(\"nauticalDawn        \" + times.nauticalDawn.toLocaleTimeString())\n\n// dawn (morning nautical twilight ends, morning civil twilight starts)\nconsole.log(\"dawn                \" + times.dawn.toLocaleTimeString())\n"]}